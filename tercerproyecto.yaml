Description: Template para la Unidad 3

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 172.60.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: IG

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 172.60.10.0/24
      MapPublicIpOnLaunch: true

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: 172.60.20.0/24
      MapPublicIpOnLaunch: true

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 172.60.30.0/24
      MapPublicIpOnLaunch: false

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: 172.60.40.0/24
      MapPublicIpOnLaunch: false

  NatGateway1eip:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway2eip:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  Natgateway1:
    Type :   AWS::EC2::NatGateway     
    Properties:
      AllocationId: !GetAtt NatGateway1eip.AllocationId
      SubnetId: !Ref PrivateSubnet1
  
  Natgateway2:
    Type :   AWS::EC2::NatGateway     
    Properties:
      AllocationId: !GetAtt NatGateway2eip.AllocationId
      SubnetId: !Ref PrivateSubnet2
  
  Tableruteopublica:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  
  Rutapordefectopublica:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref Tableruteopublica
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  
  Tablapublicaasociacion1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref Tableruteopublica
  
  Tablapublicaasociacion2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref Tableruteopublica
  
  Tableruteoprivada:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
  
  Rutapordefectoprivada:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref Tableruteoprivada
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref Natgateway1
  
  Tablaprivadaasociacion1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref Tableruteoprivada
  
  Tablaprivadaasociacion2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref Tableruteoprivada
 
  loadbalancersg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "balanceador"
      GroupDescription: "Security group para el balanceador de carga"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  websg:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "web"
      GroupDescription: "Security group para los servidores web"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  launchTemplate1:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: launchTemplate1 
      LaunchTemplateData:  
        DisableApiTermination: true
        ImageId: ami-002438e556dd03e4c
        InstanceType: t2.micro
        KeyName: Sanding
        SecurityGroupIds: 
          - !Ref websg

  autoscaling1:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      LaunchTemplate: 
        LaunchTemplateId: !Ref launchTemplate1
        Version: !GetAtt launchTemplate1.LatestVersionNumber
      MaxSize: 4
      MinSize: 1
      DesiredCapacity: 2
      HealthCheckGracePeriod: 300
      MaxInstanceLifetime: 2592000
      TargetGroupARNs:
        - !Ref grupo1
      Tags:
        - Key: Name
          Value: nginx
          PropagateAtLaunch: True

  grupo1:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: '/'
      HealthCheckPort: 80
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 4
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: instance  

  ListenerRule1:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref grupo1
      Conditions:
        - Field: http-request-method
          HttpRequestMethodConfig:
            Values:
              - GET_OR_HEAD
      ListenerArn: !Ref healthcheck
      Priority: 1 

  healthcheck:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref grupo1
      LoadBalancerArn: !Ref balanceador
      Port: 80
      Protocol: HTTP  

  balanceador:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      SecurityGroups: 
        - !Ref loadbalancersg
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Type: application